Q. What happens when you initialize a repository? Why do you need to do it?
When a repository is initialized a directory .git is created. 
It is needed because it becomes a git repository and files inside it can be tracked with commit history.


Q. How is the staging area different from the working directory and the repository? What value do you think it offers?
Staging area in an intermediatory step between working directory and git repository. 
It helps in commiting multiple files (may be related to a single commit) at once to the repository.

Q. How can you use the staging area to make sure you have one commit per logical change?
When one logical change has been made, add to the staging area files concerned with the logical change made.
And commit only these files related to the logical change.
Staging helps in grouping files related to a commit.

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
Case 1: SINGLE MODEL
When working in competitions, there is a code which is the best version, may be the best params found so far, then few changes are made to check how it performs on other parameters. But the best params have still to be saved as its not necessary that new settings will work. So keeping history becomes important.
Case 2: Ensemble model
One may create ensembles with different models. Adding a new model may or may not work. The best ensemble may be kept as master and each new addition experiment to ensemble may be kept as a branch to keep track of what worked and what didn't.

Q. How do the diagrams help you visualize the branch structure?
Diagrams help in understanding the structure of different branches w.r.t master branch. 
It gives a view of what features the beanch will have compared to master and vice-versa.
It also points out any unreachable commits that one might be making.

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging two branches merges the code changes made in both the branches. If everything works, then it will include the features developed in both the branches individually in the merged file.
Representing it with diagram helps in visualizing the changes which have been merged and hence included in the final merge file.

Q. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Manual merging can be cumbersome. 
Automatic merge points out the specific lines which cause conflicts. Manual merging by resolving conflicts is more efficient. 
It reduces the focus on only a few lines instead of huge files.
Automatic merging can create bugs (may be)?